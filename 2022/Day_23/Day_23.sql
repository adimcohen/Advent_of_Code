create or alter function fn_AOC_2022_Day23_GetNewElfState(@ElfState varchar(max),
															@DirOrder tinyint) returns table
as
return with Dir as
			(select Ord, XDiff, YDiff, MoveX, MoveY
				from (values	(0, 0, -1, 0, -1) --N
							,	(0, 1, -1, 0, -1) --NE
							,	(0, -1, -1, 0, -1) --NW
							,	(1, 0, 1, 0, 1) --S
							,	(1, 1, 1, 0, 1) --SE
							,	(1, -1, 1, 0, 1) --SW
							,	(2, -1, 0, -1, 0) --W
							,	(2, -1, -1, -1, 0) --NW
							,	(2, -1, 1, -1, 0) --SW
							,	(3, 1, 0, 1, 0) --E
							,	(3, 1, -1, 1, 0) --NE
							,	(3, 1, 1, 1, 0) --SE
							) Dir(Ord, XDiff, YDiff, MoveX, MoveY)
				)
			, OrderedDir as
			(select (Ord - @DirOrder + 4) % 4 Ord, XDiff, YDiff, MoveX, MoveY, count(*) over(partition by Ord) GroupDirCount, Ord OrigOrd
				from Dir
			)
			, Positions as
			(select cast(json_value([value], '$[0]') as bigint) X
					, cast(json_value([value], '$[1]') as bigint) Y
				from string_split(@ElfState, ';')
			)
			, MovingOptions as
			(select e.X, e.Y, Ord, iif(count(n.X) = 0, 1, 0) FreeDir
				from Positions e
					cross join OrderedDir
						left join Positions n on n.X = e.X + XDiff
											and n.Y = e.Y + YDiff
				group by e.X, e.Y, Ord
			)
			, UniqueOptions as
			(select X, Y, min(iif(FreeDir = 1, Ord, null)) MoveDir, sum(FreeDir) FreeDirs
				from MovingOptions
				group by X, Y
			)
			, FinalMovingOptions as
			(select X, Y, DestX, DestY, count(*) over(partition by DestX, DestY) CountDest
				from UniqueOptions
					outer apply (select top 1 X + MoveX DestX, Y + MoveY DestY
									from OrderedDir d
									where d.Ord = MoveDir
										and FreeDirs < 4
								) d
			)
		select string_agg(cast(concat('[', iif(MakeAMove = 1, DestX, X), ',', iif(MakeAMove = 1, DestY, Y), ']') as varchar(max)), ';') within group(order by Y, X) NewElfState, sum(MakeAMove) ElvesMoved
		from FinalMovingOptions
			cross apply (select iif(CountDest = 1
										and DestX is not null, 1, 0) MakeAMove) mm
GO
declare @Str varchar(max) =
'#...#.####.......###.#..##.#####.#...##.##.##.#.#.#...#.#...##...#..#.
#.#.####.#.#.###...#####.##..####..#.###...#.#...........#..#.#..##...
#.#####....#..###.#.###..##.#.#.#..#...###...####.#.##.#.#..#.###.#..#
.#..##.....##.##.#.#...##.#.##..#..##.#.#...#####...####..###...##..#.
##...###..##....##.#.#...#...#...##...#..#.#..##..###..##......####.#.
#..##.#.#...####.....###.#...#####.....##.##.#....#.#.......####..#.#.
..#.###....###..##.....#...#...#####....#.###.....###..###.#####..#...
#..###..##...##.#.#...##.#.#.#.###.#######.#.###...#..#.######....##.#
#.....###.....####.#..#...##..#.#.#...##....##.###.#.#...#.#.#..#.###.
.#...#......#......##..##.#....#.......##....##...#####...###..#.#.###
.#.####...#.###.##..##.#.#.##.##.####..####.###.#######..##...#..###..
.....##......#.#.##.######....#.#.#.#####.##.#.##...#.#..###.#.#.###..
.#.##.#.#.##..###.#..#...#####..##..#.#####...#....#..#.#...#.##.#....
.####...#....#.#.##.#.##.####......#......###....####.....#######....#
.###...########.##.#..#.#...#.##..####.##.#####.#..#.#....##...#...##.
#..###..####.#....#.#..#####.##.#.##...#.#.###.###.#.#....###...#.##.#
###..#.###.#.#####.###....###..#...##.###.#..##.####.#.#.#.###...##.#.
.#####.#..##..#...#.##.#..##.#.#.#...##.##..####..#.##.........#..##.#
.#.###...#....#.##.######..#...##.#...###.##...###...########..#.#.###
.######.#...##.####.##..#..#...#.#..##.##.#.##.#.#.#.##.#.###..##.##.#
#...####.#.#..##.#...##.#.#...##.#......####...#..#....##.##..#.###.#.
#....##..#.##....#######.#...#..#.####.##.....###.####.#.###..#..####.
..##..##.#....########..#.##.......#...#.#.........##.#.#..#....####..
.#..##.#.#.##...#.....##...##.#.#...#....#..#####.#..#..#.###..#.#.###
#.##.##............##.##.....##.#...#.#..##..#.#..###.....#..#..#..#.#
..#.....#..#..#.#.....#...###.#.#..#....##.##...#...##.##....#..##...#
..##...##.##......#...#..#####....#..#......###.#..#####...####.#....#
#..###.##..####.#....#..##.#..##.##.#.#..######.........#.##....######
..#.######.#.##...#..####..##....##..###.#.###.#.#..#.##.##.###.#..#.#
..#.####.###.#.#..###..#######.#..##.#....#.#####.###....#.#..###...##
....#....#..###.#...#......#..##...##..##.#.###...###.#.#.#.#..#...#.#
#....#..##..##.###.####.#######.###.###...#...#..###...#...#.#..#.##.#
#...###.##..#.#..#.#..#.#.#..###..####.##.##.#...###.#.###########...#
##...#...#...#..##....#...#...#....###.#######.....#.#.##...##..#.#..#
.....##.##.#.#.#..#..###....##.#....####.#.##.####..#.##.#..##.##.###.
....##.#....#####.#.##.........##.######.#..###..###..#.#.##.###.....#
...##..#####....##..####....##..###.##.##..##...#.#.###.#.#.##.#.##...
..#..####.#..#.##.##.#..####..#.#...##.....#...#....###..#.#.##..#.##.
#####.#..#.#.###..#.#.###.#######.#.#...#........##..#...#.##..#.##.#.
.#..###.###.#..##.####.##.###...#..#.#.....#.#.#...#....#.###..##.#.#.
.#.#.....##.##.#.####..##.#.#...#.#..#.....#..#....#......#.######.##.
...##.##..#....###...#..#.#..#.#.#.##..##.#..#.####..####.#.#.........
#.###.#...#....#...#.###.....#..#...##.#.#.####..#...#.#.#..####......
##.###.#.#####.#.##....#..#..##..##..#..##..##...#.#.##.##....#...##..
.###..###....#...##..###..#....###.....#..##...###.###.###..##.#..####
#.###........#..##.#.....#.....#...##.#####.#.##..##....####.#...##.#.
#.#.#..###.##.###..###..##..######..##.#####......#.##....##.#..###.#.
###...##.#.#.#.#.#.######...#..##.....#.#######.#..#..###.#.###.#...#.
###..######......#.###..#.....#########....#####.##..#...#.#...###..##
##.#..######..#.###..#.###.###.#.#####.####.....#...#.#...#####.#..##.
...####.#.#####.##...##..#.######.###....#.###.#.##.#####...#.#.#.####
#..###.########.#.###.#.####.###.###.#..#.##.#.#####..####.#.###...###
#..#.....#.###.#.##.###.#.....#..#....#####.#.#...##.###.######.###.##
##.#.#...###.#.#..#.#.###....###..#.##.#..#..###.#..#######.##.###.###
.##..##.#..#.#####.###.#.#.#......#.#.##.#...#.######.##...#.###.#####
#####....#.##....##.###..#.###..###.##...####.###.###..##.####.#.##.##
#......#.##.##.##.#....#.##.##..########.#....#..#..###.#####.#.#..##.
.#..#...#..##.#..###...#......##.##.###.....#.#.#.#..#.#####.##..#.###
.##.##.#.##.###..#..##.####.#.#..####.#.#.......##.......##.....#####.
####...##...#.#.#..###.#####.#.#.#.##.#..##......#.###.##..#...#...#.#
...........##.#.####.#.#########..###....#...#.......#..####..#####.#.
.#.###.##.#..####..#.###.#.#####..##.#......#.#..#####.##.#.###.#.##.#
###..#...#.##.####.#.##...#..#.......######...#....##....#.....#...#..
####.#.#...#.#.#######.##...#..#.#..#####...#..#.#..##.##.....##.##.#.
###..##..#..#.#.##.##..#..##..##..#####.#.##..##.####.##.##...#.####.#
#.##.#.#..##..####.....#.###..#....###.#.##.###.#.#.#.######.##....#..
.#.#..##..#.###.#.....##.##..##....####..#.#..#..##########.#...#...#.
###.####.#.#.##.#......#.###......##.###..##.##.#..#....#.##.#..#.....
.....##.......###.#..####.#.#.#.###..##...##...####.#.##.#.#.#..#.#.##
..##.##.#..#.##.....#...##.#...#.###..##.#.##...#..#.....###.#.#####..'

drop table if exists #Input
drop table if exists #Numbers

--Number Table
;with rec as
	(select -15000 Num
	union all
	select Num + 1
	from rec
	where Num <= 15000
	)
select Num
into #Numbers
from rec
option (maxrecursion 32767)
create unique clustered index IX_#Numbers on #Numbers(Num)

;with r as
	(select row_number() over(order by (select 1)) Y, [value] Rw
		from string_split(replace(@Str, char(13), ''), char(10)) r
	)
select Num X, Y
into #Input
from r
	inner join #Numbers on Num between 1 and len(Rw)
where substring(rw, Num, 1) = '#'
order by 2, 1

;with StartingState as
	(select string_agg(cast(concat('[', X, ',', Y, ']') as varchar(max)), ';') within group(order by Y, X) ElfState
		from #Input
	)
	, rec as
	(select 0 Rnd, ElfState
	from StartingState
	union all
	select Rnd + 1, NewElfState
	from rec r
		cross apply fn_AOC_2022_Day23_GetNewElfState(r.ElfState, r.Rnd % 4)
	where r.Rnd < 10
		and ElvesMoved > 0
	)
	, Lst as
	(select top 1 ElfState
		from rec
		order by Rnd desc
	)
select ((max(X) - min(X)) + 1) * ((max(Y) - min(Y) + 1)) - count(*) Answer1
from Lst
	cross apply string_split(ElfState, ';')
	cross apply (select cast(json_value([value], '$[0]') as bigint) X
					, cast(json_value([value], '$[1]') as bigint) Y
				) xy

;with StartingState as
	(select string_agg(cast(concat('[', X, ',', Y, ']') as varchar(max)), ';') within group(order by Y, X) ElfState
		from #Input
	)
	, rec as
	(select 0 Rnd, ElfState
	from StartingState
	union all
	select Rnd + 1, NewElfState
	from rec r
		cross apply fn_AOC_2022_Day23_GetNewElfState(r.ElfState, r.Rnd % 4)
	where ElvesMoved > 0
	)
select count(*) Answer2 --Need to add 1 as that's the round where nobody moves, but the CTE already has the anchor row, so that's the +1
from rec
option (maxrecursion 32767)